# Importamos las librerías
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("EnvStats")) install.packages("EnvStats")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("car")) install.packages("car")
if (!require("lmtest")) install.packages("lmtest")
if (!require("psych")) install.packages("psych")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("leaps")) install.packages("leaps")
if (!require("caret")) install.packages("caret")
if (!require("boot")) install.packages("boot")
library(dplyr)
library(ggplot2)
library(EnvStats)
library(ggpubr)
library(tidyverse)
library(car)
library(lmtest)
library(psych)
library(ggfortify)
library(leaps)
library(caret)
install.packages("recipes")
# Importamos las librerías
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("EnvStats")) install.packages("EnvStats")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("car")) install.packages("car")
if (!require("lmtest")) install.packages("lmtest")
if (!require("psych")) install.packages("psych")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("leaps")) install.packages("leaps")
if (!require("caret")) install.packages("caret")
if (!require("boot")) install.packages("boot")
library(dplyr)
library(ggplot2)
library(EnvStats)
library(ggpubr)
library(tidyverse)
library(car)
library(lmtest)
library(psych)
library(ggfortify)
library(leaps)
library(caret)
install.packages("caret")
library(caret)
remove.packages("caret")
# Importamos las librerías
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("EnvStats")) install.packages("EnvStats")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("car")) install.packages("car")
if (!require("lmtest")) install.packages("lmtest")
if (!require("psych")) install.packages("psych")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("leaps")) install.packages("leaps")
if (!require("caret")) install.packages("caret")
if (!require("boot")) install.packages("boot")
library(dplyr)
library(ggplot2)
library(EnvStats)
library(ggpubr)
library(tidyverse)
library(car)
library(lmtest)
library(psych)
library(ggfortify)
library(leaps)
library(caret)
# Importamos las librerías
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("EnvStats")) install.packages("EnvStats")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("car")) install.packages("car")
if (!require("lmtest")) install.packages("lmtest")
if (!require("psych")) install.packages("psych")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("leaps")) install.packages("leaps")
if (!require("caret")) install.packages("caret")
if (!require("boot")) install.packages("boot")
if(!require("recips")) install.packages("recips")
library(dplyr)
library(ggplot2)
library(EnvStats)
library(ggpubr)
library(tidyverse)
library(car)
library(lmtest)
library(psych)
library(ggfortify)
library(leaps)
library(caret)
# Lectura de archivo
# Se abre el CSV, cambiar la ruta según corresponda
nombre_archivo <- "EP09 Datos.csv"
datos <- read.csv2(nombre_archivo)
# Definir la semilla
set.seed(5824) # Semilla par, se seleccionan mujeres
#Se crea una nueva columna para cada fila
datos$IMC <- datos$Weight / (datos$Height/100)^2
# Se crea la variable dicotómica EN, (Sobrepeso = 1, No sobrepeso = 0)
datos$EN <- as.factor(ifelse(datos$IMC >= 23.2, 1, 0))
# Seleccionar una muestra aleatoria de 150 mujeres (si la semilla es un número par)
datos_sin_sobrepeso <- datos %>%
filter( EN==0) %>%
sample_n(50)
datos_con_sobrepeso <- datos %>%
filter( EN==1) %>%
sample_n(50)
datos_Prueba <- rbind(datos_con_sobrepeso, datos_sin_sobrepeso)
#Desordenamos los datos con sample
datos_Prueba <- datos_Prueba[sample(nrow(datos_Prueba)),]
# (Excluyendo las variables IMC y EN)
variables_lineales <- setdiff(names(datos_Prueba), c("Weight", "IMC", "EN", "Height"))
# Selección de predictores usando regsubsets
leaps_model <- regsubsets(Weight ~ ., data = datos_Prueba[ , c("Weight", variables_lineales)],
nbest = 1, nvmax = 8, method = "exhaustive")
# Obtener los mejores predictores (selección entre 2 y 8)
summary_leaps <- summary(leaps_model)
best_predictors <- names(coef(leaps_model, which.min(summary_leaps$cp))[-1])
best_predictors
# Construcción del modelo de regresión lineal múltiple con caret
control <- trainControl(method = "boot", number = 2999)
datos_prueba4 <- datos_Prueba[, -which(names(datos) %in% c("Weight", "Height", "EN", "IMC"))]
control_rfe <- rfeControl(
functions = lmFuncs,
method = "repeatedcv",
number = 5,
repeats = 5,
verbose = FALSE
)
predictores_disponibles <- setdiff(colnames(datos_Prueba), c("Weight", "Height", "IMC"))
# Selección de predictores usando regsubsets
model_leaps<-regsubsets(EN ~.,data=datos_Prueba[, predictores_disponibles],nbest = 1)
plot(model_leaps, scale="bic")
formula <- as.formula(paste("EN ~", paste(mejores_predictores, collapse = " + ")))
predictores_disponibles <- setdiff(colnames(datos_Prueba), c("Weight", "Height", "IMC"))
# Selección de predictores usando regsubsets
model_leaps<-regsubsets(EN ~.,data=datos_Prueba[, predictores_disponibles],nbest = 1)
plot(model_leaps, scale="bic")
modelo_logistico <- glm(EN ~ Bicep.girth + Hip.girth + Waist.girth , data = datos_Prueba, family = binomial)
modelo_logistico <- glm(EN ~ Bicep.Girth + Hip.Girth + Waist.Girth , data = datos_Prueba, family = binomial)
summary(modelo_logistico)
predicciones <- predict(modelo_logistico, type = "response")
roc_obj <- roc(datos_Prueba$EN, predicciones)
predicciones <- predict(modelo_logistico, type = "response")
roc_obj <- roc(datos_Prueba$EN, predicciones)
predicciones <- predict(modelo_logistico, type = "response")
roc_obj <- roc(datos_Prueba$EN, predicciones)
control_loocv <- trainControl(method = "LOOCV")
# Importamos las librerías
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("EnvStats")) install.packages("EnvStats")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("car")) install.packages("car")
if (!require("lmtest")) install.packages("lmtest")
if (!require("psych")) install.packages("psych")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("leaps")) install.packages("leaps")
if (!require("caret")) install.packages("caret")
if (!require("boot")) install.packages("boot")
if(!require("recips")) install.packages("recips")
library(dplyr)
library(ggplot2)
library(EnvStats)
library(ggpubr)
library(tidyverse)
library(car)
library(lmtest)
library(psych)
library(ggfortify)
library(leaps)
library(caret)
install.packages("future")
install.packages("parallelly")
install.packages("future")
install.packages("parallelly")
install.packages("future")
install.packages("parallelly")
install.packages("parallelly")
install.packages("parallelly", type = "source")
