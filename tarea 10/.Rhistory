sample_n(75)
datos_mujeres_consobrepeso <- datos %>%
filter(Gender == 0, EN==1) %>%
sample_n(75)
#Separamos los conjuntos de prueba y entrenamiento
m_sinS_prueba <- head(datos_mujeres_sinsobrepeso, 50)
m_conS_prueba <- head(datos_mujeres_consobrepeso, 50)
m_sinS_entrenamiento <- tail(datos_mujeres_sinsobrepeso, 25)
m_conS_entrenamiento <- tail(datos_mujeres_consobrepeso, 25)
#Juntamos los conjuntos de prueba y entrenamiento
datos_prueba <- rbind(m_sinS_prueba, m_conS_prueba)
datos_entrenamiento <- rbind(m_sinS_entrenamiento, m_conS_entrenamiento)
#Creamos una lista con las variables predictoras Elbows.diameter + Bitrochanteric.diameter + Chest.diameter + Waist.Girth + Bicep.Girth + Chest.depth + Calf.Maximum.Girth + Navel.Girth
variables <- c("Elbows.diameter", "Bitrochanteric.diameter", "Chest.diameter", "Waist.Girth", "Bicep.Girth", "Chest.depth", "Calf.Maximum.Girth", "Navel.Girth")
#Modelo Nulo
modeloNulo <- glm(EN ~ 1, data = datos_entrenamiento, family = binomial)
#usar pero falta justificar de buena manera
modeloSimple <- glm(EN ~ Biiliac.diameter, data = datos_entrenamiento, family = binomial)
summary(modeloSimple)
modelo_completo <- glm(EN ~ Biiliac.diameter + Shoulder.Girth + Elbows.diameter + Bitrochanteric.diameter + Chest.diameter + Waist.Girth + Bicep.Girth + Chest.depth + Calf.Maximum.Girth + Navel.Girth, data = datos_entrenamiento, family = binomial)
modeloTest <- add1(modeloSimple, scope = modelo_completo)
modeloTest
#Modificamos el modelo añadiendo el predictor que nos dio el menor AIC, "Bicep.Girth"
modelo_simple2 <- update(modeloSimple, . ~ . + Bicep.Girth)
AIC_2 <- add1(modelo_simple2, scope = modelo_completo)
AIC_2
#Modificamos el modelo añadiendo el predictor "Navel.Grith"
modelo_simple3 <- update(modelo_simple2, . ~ . + Navel.Girth)
AIC_2 <- add1(modelo_simple2, scope = modelo_completo)
AIC_2
#Añadimos un predictor más, que sería Waist.Girth
modelo_simple4 <- update(modelo_simple3, . ~ . + Waist.Girth)
AIC_3 <- add1(modelo_simple3, scope = modelo_completo)
AIC_3
#Añadimos un predictor más, que sería Shoulder.Girth
modelo_simple5 <- update(modelo_simple4, . ~ . + Shoulder.Girth)
AIC_4 <- add1(modelo_simple4, scope = modelo_completo)
AIC_4
#Añadimos un predictor más, que sería Chest.depth
modelo_simple6 <- update(modelo_simple5, . ~ . + Chest.depth)
AIC_5 <- add1(modelo_simple5, scope = modelo_completo)
AIC_5
modeloA <- predict(modelo_simple2, datos_prueba, type = "response")
modeloB <- predict(modelo_simple3, datos_prueba, type = "response")
modeloC <- predict(modelo_simple4, datos_prueba, type = "response")
modeloD <- predict(modelo_simple5, datos_prueba, type = "response")
modeloE <- predict(modelo_simple6, datos_prueba, type = "response")
print(anova(modeloNulo,modeloSimple, modelo_simple2, modelo_simple3, modelo_simple4, modelo_simple5, modelo_simple6, test = "LRT"))
# Verificar linealidad con los predictores
datos_lin_w <- datos_entrenamiento %>%
select_all() %>%
mutate(Logit = psych::logit(fitted(modelo_simple2)))
datos_lin_l <- pivot_longer(datos_lin_w, cols = c(Biiliac.diameter, Bicep.Girth), names_to = "Predictor", values_to = "Valor")
P_1 <- ggscatter(datos_lin_l, x = "Logit", y = "Valor", ylab = "Valor del predictor")
P_1 <- P_1 + geom_smooth(method = lm, formula = y ~ x, se = TRUE)
P_1 <- P_1 + theme_pubr()
P_1 <- P_1 + facet_wrap(~ Predictor, scales = "free_y")
print(P_1)
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple2, which = 2, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
# Revisar posibles casos influyentes
estad_inf <- influence.measures(modelo_simple2)
estad_infmat <- round(estad_inf$infmat, 3)
cat("\n")
cat("Casos sospechosos de apalancamiento\n")
cat("-----------------------------------\n")
print(estad_inf)
# Verificar linealidad con los predictores
datos_lin_w <- datos_entrenamiento %>%
select_all() %>%
mutate(Logit = psych::logit(fitted(modelo_simple2)))
datos_lin_l <- pivot_longer(datos_lin_w, cols = c(Biiliac.diameter, Bicep.Girth), names_to = "Predictor", values_to = "Valor")
P_1 <- ggscatter(datos_lin_l, x = "Logit", y = "Valor", ylab = "Valor del predictor")
P_1 <- P_1 + geom_smooth(method = lm, formula = y ~ x, se = TRUE)
P_1 <- P_1 + theme_pubr()
P_1 <- P_1 + facet_wrap(~ Predictor, scales = "free_y")
print(P_1)
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple3))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple4))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple5))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple6))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple2))
# Revisar posibles casos influyentes
estad_inf <- influence.measures(modelo_simple2)
estad_infmat <- round(estad_inf$infmat, 3)
cat("\n")
cat("Casos sospechosos de apalancamiento\n")
cat("-----------------------------------\n")
print(estad_inf)
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple2, which = 2, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
# Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple3))
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple3, which = 2, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple3, which = 3, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple3, which = 2, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple4, which = 2, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple6, which = 2, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
# Verificar normalidad de los residuos
P_2 <- autoplot(modelo_simple2, which = 2, label.colour = 'blue', label.repel = TRUE)
P_2 <- P_2 + theme_pubr()
print(P_2)
modelo_completo <- glm(EN ~ Biiliac.diameter + Shoulder.Girth + Elbows.diameter + Bitrochanteric.diameter + Chest.diameter + Waist.Girth + Bicep.Girth + Chest.depth + Calf.Maximum.Girth + Navel.Girth, data = datos_entrenamiento, family = binomial)
modeloTest <- add1(modeloSimple, scope = modelo_completo)
modeloTest
### Verificar linealidad con los predictores
datos_lin_w <- datos_entrenamiento %>%
select_all() %>%
mutate(Logit = psych::logit(fitted(modelo_simple3)))
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("psych")) install.packages("psych")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("car")) install.packages("car")
# Importamos las librerías
library(dplyr)
library(ggplot2)
library(EnvStats)
library(ggpubr)
library(tidyverse)
library(car)
library(lmtest)
library(psych)
library(ggfortify)
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggpubr")) install.packages("ggpubr")
if (!require("psych")) install.packages("psych")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("car")) install.packages("car")
# Importamos las librerías
library(dplyr)
library(ggplot2)
library(EnvStats)
library(ggpubr)
library(tidyverse)
library(car)
library(lmtest)
library(psych)
library(ggfortify)
# Lectura de archivo
# Se abre el CSV, cambiar la ruta según corresponda
nombre_archivo <- "EP09 Datos.csv"
datos <- read.csv2(nombre_archivo)
# Definir la semilla
set.seed(5824) # Semilla par, se seleccionan mujeres
#Se crea una nueva columna para cada fila
datos$IMC <- datos$Weight / (datos$Height/100)^2
# Se crea la variable dicotómica EN, (Sobrepeso = 1, No sobrepeso = 0)
datos$EN <- ifelse(datos$IMC >= 23.2, 1, 0)
# Seleccionar una muestra aleatoria de 150 mujeres (si la semilla es un número par)
datos_mujeres_sinsobrepeso <- datos %>%
filter(Gender == 0, EN==0) %>%
sample_n(75)
datos_mujeres_consobrepeso <- datos %>%
filter(Gender == 0, EN==1) %>%
sample_n(75)
#Separamos los conjuntos de prueba y entrenamiento
m_sinS_prueba <- head(datos_mujeres_sinsobrepeso, 50)
m_conS_prueba <- head(datos_mujeres_consobrepeso, 50)
m_sinS_entrenamiento <- tail(datos_mujeres_sinsobrepeso, 25)
m_conS_entrenamiento <- tail(datos_mujeres_consobrepeso, 25)
#Juntamos los conjuntos de prueba y entrenamiento
datos_prueba <- rbind(m_sinS_prueba, m_conS_prueba)
datos_entrenamiento <- rbind(m_sinS_entrenamiento, m_conS_entrenamiento)
#Creamos una lista con las variables predictoras Elbows.diameter + Bitrochanteric.diameter + Chest.diameter + Waist.Girth + Bicep.Girth + Chest.depth + Calf.Maximum.Girth + Navel.Girth
variables <- c("Elbows.diameter", "Bitrochanteric.diameter", "Chest.diameter", "Waist.Girth", "Bicep.Girth", "Chest.depth", "Calf.Maximum.Girth", "Navel.Girth")
#Desordenamos los datos con sample
datos_prueba <- datos_prueba[sample(nrow(datos_prueba)),]
datos_entrenamiento <- datos_entrenamiento[sample(nrow(datos_entrenamiento)),]
#Modelo Nulo
modeloNulo <- glm(EN ~ 1, data = datos_entrenamiento, family = binomial)
#usar pero falta justificar de buena manera
modeloSimple <- glm(EN ~ Biiliac.diameter, data = datos_entrenamiento, family = binomial)
summary(modeloSimple)
modelo_completo <- glm(EN ~ Biiliac.diameter + Shoulder.Girth + Elbows.diameter + Bitrochanteric.diameter + Chest.diameter + Waist.Girth + Bicep.Girth + Chest.depth + Calf.Maximum.Girth + Navel.Girth, data = datos_entrenamiento, family = binomial)
modeloTest <- add1(modeloSimple, scope = modelo_completo)
modeloTest
#Modificamos el modelo añadiendo el predictor que nos dio el menor AIC, "Bicep.Girth"
modelo_simple2 <- update(modeloSimple, . ~ . + Bicep.Girth)
AIC_2 <- add1(modelo_simple2, scope = modelo_completo)
AIC_2
#Modificamos el modelo añadiendo el predictor "Navel.Grith"
modelo_simple3 <- update(modelo_simple2, . ~ . + Navel.Girth)
AIC_2 <- add1(modelo_simple2, scope = modelo_completo)
AIC_2
#Añadimos un predictor más, que sería Waist.Girth
modelo_simple4 <- update(modelo_simple3, . ~ . + Waist.Girth)
AIC_3 <- add1(modelo_simple3, scope = modelo_completo)
AIC_3
#Añadimos un predictor más, que sería Shoulder.Girth
modelo_simple5 <- update(modelo_simple4, . ~ . + Shoulder.Girth)
AIC_4 <- add1(modelo_simple4, scope = modelo_completo)
AIC_4
#Añadimos un predictor más, que sería Chest.depth
modelo_simple6 <- update(modelo_simple5, . ~ . + Chest.depth)
AIC_5 <- add1(modelo_simple5, scope = modelo_completo)
AIC_5
modeloA <- predict(modelo_simple2, datos_prueba, type = "response")
modeloB <- predict(modelo_simple3, datos_prueba, type = "response")
modeloC <- predict(modelo_simple4, datos_prueba, type = "response")
modeloD <- predict(modelo_simple5, datos_prueba, type = "response")
modeloE <- predict(modelo_simple6, datos_prueba, type = "response")
print(anova(modeloNulo, modelo_simple2, modelo_simple3, modelo_simple4, modelo_simple5, modelo_simple6, test = "LRT"))
### Verificar linealidad con los predictores
datos_lin_w <- datos_entrenamiento %>%
select_all() %>%
mutate(Logit = psych::logit(fitted(modelo_simple3)))
datos_lin_l <- pivot_longer(datos_lin_w, cols = c(Biiliac.diameter, Bicep.Girth, Navel.Girth), names_to = "Predictor", values_to = "Valor")
P_1 <- ggscatter(datos_lin_l, x = "Logit", y = "Valor", ylab = "Valor del predictor")
P_1 <- P_1 + geom_smooth(method = lm, formula = y ~ x, se = TRUE)
P_1 <- P_1 + theme_pubr()
P_1 <- P_1 + facet_wrap(~ Predictor, scales = "free_y")
print(P_1)
###Vericamos la multicolinealidad
vifs_3 <- vif(modelo_simple3)
print(vifs_3)
print(mean(vifs_3))
### Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple3))
### Revisar posibles casos influyentes
estad_inf <- influence.measures(modelo_simple3)
estad_infmat <- round(estad_inf$infmat, 3)
cat("\n")
cat("Casos sospechosos de apalancamiento\n")
cat("-----------------------------------\n")
##< --------------------------- Revisar casos influyente/atipicos ------------------------------>
# Instalar la librería pROC (si no está ya instalada)
install.packages("pROC")
# Cargar la librería pROC
library(pROC)
# Evaluación del poder predictivo
# Seleccionamos el modelo con 3 predictores
modelo_final <- modelo_simple3
#Ecaluamos con el conjunto de prueba
predicciones <- predict(modelo_final, datos_prueba, type = "response")
#Graficamos la curva ROC, indicando AUC obtenido
roc <- roc(datos_prueba$EN, predicciones)
plot(roc, main = "Curva ROC", col = "blue")
auc(roc)
# Obtener las predicciones (con el mismo umbral)
predicciones <- ifelse(predicciones > 0.5, 1, 0)
### Verificar independencia de los residuos
cat("\n")
cat("Verificación de independencia de los residuos\n")
cat("-------------------------------------------\n")
print(durbinWatsonTest(modelo_simple3))
###Vericamos la multicolinealidad
vifs_3 <- vif(modelo_simple3)
print(vifs_3)
print(mean(vifs_3))
### Revisar posibles casos influyentes
estad_inf <- influence.measures(modelo_simple3)
estad_infmat <- round(estad_inf$infmat, 3)
cat("\n")
cat("Casos sospechosos de apalancamiento\n")
cat("-----------------------------------\n")
##< --------------------------- Revisar casos influyente/atipicos ------------------------------>
